from typing import Any, Optional, Tuple

from psd_tools.constants import Compression, ColorMode
from psd_tools.psd import PSD, FileHeader, ImageResources
from psd_tools.psd.tagged_blocks import TaggedBlocks
from psd_tools.api.layers import GroupMixin


class PSDImage(GroupMixin):
    def __init__(self, data: PSD) -> None: ...
    @classmethod
    def new(cls, mode: str, size: Tuple[int, int], color: int = ..., depth: int = ..., **kwargs: Any) -> PSDImage: ...
    @classmethod
    def frompil(cls, image: Any, compression: Compression = ...) -> PSDImage: ...
    @classmethod
    def open(cls, fp: str, encoding: str = ...) -> PSDImage: ...
    def save(self, fp: str, mode: str = ..., **kwargs: Any) -> None: ...
    def topil(self, channel: Optional[int] = ..., **kwargs: Any) -> Optional[Any]: ...
    def compose(self, force: bool = ..., bbox: Optional[Tuple[int, int, int, int]] = ..., layer_filter: Optional[Any] = ..., **kwargs: Any) -> Optional[Any]: ...
    def is_visible(self) -> bool: ...
    @property
    def parent(self) -> None: ...
    def is_group(self) -> bool: ...
    def has_preview(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def kind(self) -> str: ...
    @property
    def visible(self) -> bool: ...
    @property
    def left(self) -> int: ...
    @property
    def top(self) -> int: ...
    @property
    def right(self) -> int: ...
    @property
    def bottom(self) -> int: ...
    @property
    def width(self) -> int: ...
    @property
    def height(self) -> int: ...
    @property
    def size(self) -> Tuple[int, int]: ...
    @property
    def offset(self) -> Tuple[int, int]: ...
    @property
    def bbox(self) -> Tuple[int, int, int, int]: ...
    @property
    def viewbox(self) -> Tuple[int, int, int, int]: ...
    @property
    def color_mode(self) -> ColorMode: ...
    @property
    def channels(self) -> int: ...
    @property
    def depth(self) -> int: ...
    @property
    def version(self) -> int: ...
    @property
    def image_resources(self) -> ImageResources: ...
    @property
    def tagged_blocks(self) -> Optional[TaggedBlocks]: ...
    def has_thumbnail(self) -> bool: ...
    def thumbnail(self) -> Any: ...
    def __repr__(self) -> str: ...
    def _repr_pretty_(self, p, cycle) -> str: ...
    @classmethod
    def _make_header(cls, mode: str, size: int, depth: int = ...) -> FileHeader: ...
    def _get_pattern(self, pattern_id: Any) -> Optional[Any]: ...
    def _init(self) -> None: ...
